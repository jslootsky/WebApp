/* To implement dropDowns, we have three styling elements (that are referenced by the JS code): 
*
*    - dropDown: a div container for dropDown header and (sibling associated dropDown content
*    - dropHeader: visible upon first rendering. when you click on a drop header, 
*          its related content will open up.
*    - dropContent: initially hidden, but becomes visible when the dropHeader is clicked.
*/

/* This is an example of how to create a style sheet that "goes with" some "framework style JavaScript code". 
   After selecting a name for our framework (in this case, I'm calling it "dropDown"), we name our style sheet.
   I'm naming it "dropDown.css". Inside the style sheet, I have only one single global CSS classname ".dropDown". 
   All style rules must begind with that single global CSS classname so that we do not claim global CSS classnames 
   that the HTML coder (a person using our little framework) might want to use. We are avoiding polluting the 
   global namespace. 
*/

.dropDown {
    /* .dropDown is a parent of dropContent. Since we want to right justify dropConent with its parent,
    assign "position relative" to the parent (.dropDown) and "position absolute" to the child (.dropContent).      */
    position: relative;
    /* "display:inline-block" makes divs are positioned/treated like words instead of like block/paragraph elements */
    display: inline-block;
    /* put a little space between drop down groups */
    margin-right: 1.5rem;
    font-size: 1rem;
    color: black;
    /* Change mouse pointer when the user hovers over a dropDown element */
    cursor: pointer;
    white-space: nowrap; /* nothing in a drop down menu (header or content) should wrap */
}

.dropDown{
    color: #DDDDDD;
    font-size: 0.75rem;
}

.dropContent a {
    color: #DDDDDD;
    font-size: 0.75rem;
}

.dropDown .dropContent {
    font-size: 0.85rem;
    line-height: 1.25rem;
    margin-top: 0.5rem;
    padding: 0.25rem 0.5rem;
    background-color: #000000;
    border-radius: 0.25rem;
    
    position: absolute;
    z-index: 3;
    
    left: 0; /* Align dropdown with the header */
    top: -100%; /* Initially hide it above */
    transition: top 0.3s ease-in-out; /* Smooth animation */
    
    opacity: 0; /* Start as invisible */
    pointer-events: none; /* Prevent interaction when hidden */
}

/* The JS code adds and removes class .show and class .hide to/from dropContent and this 
   provides some animation due to the transition styled in .dropContent */

/* when JS code adds class "show" to dropConent, the dropContent is right aligned (because of right:0px))with its 
   first non-static parent, dropDown (which is position:relative) */
.dropDown .show {
    top: 100%; /* Moves it below the header */
    opacity: 1; /* Make it visible */
    pointer-events: auto; /* Allow interaction */
}

.dropDown .hide {
    max-height: 0px;
    opacity: 0;
    pointer-events: none;
}

@media (min-width: 600px) {
    .dropDown .show {
        top: 200%; /* Moves it below the header */
        opacity: 1; /* Make it visible */
        pointer-events: auto; /* Allow interaction */
    }
}